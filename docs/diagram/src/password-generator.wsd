@startuml Password Generator


abstract class Engine {
    +{abstract} generatePassword(): string
    #defaultSourceString: string
}

class EngineFactory {
    +create(): Engine
}

Password *-- Engine
Engine <|-- StandardEngine
Engine <|-- AlphaNumEngine
AlphaNumEngine <|-- PronounceableEngine
Application *- Password
EngineName --* Password
EngineName --* Application
ApplicationTest --> Application
PasswordTest --> Password
StandardEngineTest --> StandardEngine
AlphaNumEngineTest --> AlphaNumEngine
PronounceableEngineTest --> PronounceableEngine

class StandardEngine {
    +generatePassword(): string
    -buildAsciiSequence(): string
}

class AlphaNumEngine {
    +generatePassword(): string
}

class PronounceableEngine {
    +generatePassword(): string
    -generateLettersSequence(): string
    -computeNumberOfPasses(): int
}

class Password {
    -passwordLength: int
    -password: string
    +setPasswordEngine(): void
    +setPasswordLength(): void
    +generatePasswordWithEngine(): void
    +getPassword(): string
}

enum EngineName {
        Standard,
        Alphanumerique,
        Pronon√ßable
}

set namespaceSeparator ::
annotation RandomUtils::RandomUtils {
    initializeRandomEngine(): void
    getRandomNumber(): int
    getRandomCharSequence(): string
    getRandomCharFromString(): string
    getRandomSpecials(): string
    getRandomConsonants(): string
    getRandomVowels(): string
    getRandomDigits(): string
}

annotation StringUtils::StringUtils {
    getUpperString(): string
    buildLowerUpperCharSequence(): string
    buildAsciiCharSequence(): string
}

class Application {
    +readCommandLineArguments(): bool
    +selectPasswordEngineFromOptArgs(): void
    +getPasswordEngine(): EngineName
    +initializeGenerator(): void
    +runGenerator(): void
    +displayPasswordList(): void
    +getPasswordsList(): vector
    +setNumberOfPasswords(): void
    +getNumberOfPasswords(): int
    +setPasswordLength(): void
    +getPasswordLength(): int
    #getPwdLengthFromOptArgs(): void
    #getNumberPasswordsFromOptArgs(): void
    #passwordsList: vector
    -passwordLength: int
    -numberOfPasswords: int
}

class ApplicationTest
class PasswordTest
class StandardEngineTest
class AlphaNumEngineTest
class PronounceableEngineTest

@enduml